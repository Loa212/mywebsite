---
// Contact.astro
import { getEntry, type CollectionEntry } from "astro:content";
import getHrefPrefix from "../utils/getHrefPrefix";

export interface Props {
  i18nId: CollectionEntry<"i18n">["id"];
  siteKey: string;
}

const props = Astro.props;
const { i18nId, siteKey } = props;

const prefix = getHrefPrefix(i18nId) + "/";

const i18n = await getEntry("i18n", i18nId);
const { contact } = i18n.data;
---

<section class="body-font relative">
  <span id="contact-us" class="absolute -top-16 lg:-top-52"></span>
  <div class="container relative px-5 pb-12 mx-auto">
    <!-- <div class="flex flex-col text-center w-full mb-6">
      <h1 class="title">{contact.title}</h1>
      <p
        class="lg:w-2/3 mx-auto leading-relaxed text-base text-gray-500 max-w-xl mt-4"
      >
        {contact.subtitle}
      </p>
    </div> -->
    <div class="lg:w-1/2 md:w-2/3 mx-auto">
      <form id="contact-form" action="/api/mailer" method="post">
        <div class="flex flex-wrap -m-2">
          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="name" class="leading-7 text-sm text-gray-600">
                {contact.name}
              </label>
              <input
                required
                type="text"
                autocomplete="name"
                id="name"
                name="name"
                placeholder={contact.name}
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>
          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="email" class="leading-7 text-sm text-gray-600"
                >{contact.email}</label
              >
              <input
                required
                type="email"
                autocomplete="email"
                id="email"
                name="email"
                placeholder="example@email.com"
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>

          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="businessName" class="leading-7 text-sm text-gray-600">
                {contact.businessName}
              </label>
              <input
                required
                type="text"
                id="businessName"
                name="businessName"
                placeholder={contact.businessName}
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>
          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="website" class="leading-7 text-sm text-gray-600">
                {contact.website}
              </label>
              <input
                type="text"
                id="website"
                name="website"
                placeholder="www.example.com"
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>

          <div class="p-2 w-full">
            <div class="relative">
              <label for="message" class="leading-7 text-sm text-gray-600"
                >{contact.message}</label
              >
              <textarea
                minlength="4"
                required
                id="message"
                name="message"
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
              ></textarea>
            </div>
          </div>
        </div>

        <!-- hidden fields for form submission -->
        <input
          type="hidden"
          id="g-recaptcha-response"
          name="g-recaptcha-response"
        />
        <input id="i18nId" type="hidden" name="i18nId" value={i18nId} />
        <!-- end hidden fields -->

        <div class="p-2 w-full text-center">
          <button
            type="submit"
            class="btn lg:btn-md btn-primary border-0 text-white shadow-xl"
          >
            <!-- Text will be updated by the script -->
            {contact.cta}
          </button>
          <div
            id="recaptcha-banner"
            class="text-center text-xs mt-4 max-w-sm mx-auto"
          >
            This site is protected by reCAPTCHA and the Google
            <a
              class="link link-primary"
              target="_blank"
              href="https://policies.google.com/privacy">Privacy Policy</a
            > and

            <a
              class="link link-primary"
              target="_blank"
              href="https://policies.google.com/terms">Terms of Service</a
            >
             apply.
          </div>
        </div>
      </form>

      <!-- Response Message -->
      <div id="response-message" style="display:none;" class="alert">
        <div class="flex-1">
          <span id="response-label"></span>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .title {
    color: #252525;
    font-size: 48px;
    font-style: normal;
    font-weight: 700;
    line-height: 64px; /* 133.333% */
    text-transform: capitalize;
  }
</style>

<script define:vars={{ siteKey, i18nId, contact, prefix }}>
  function enableSubmitButton() {
    const submitButton = document.querySelector(
      "#contact-form button[type=submit]"
    );
    submitButton.disabled = false;
    submitButton.textContent = contact.cta;
  }

  function disableSubmitButton() {
    const submitButton = document.querySelector(
      "#contact-form button[type=submit]"
    );
    submitButton.disabled = true;
    submitButton.textContent = "Sending...";
  }

  // Function to dynamically load the reCAPTCHA script
  function loadRecaptchaScript() {
    const script = document.createElement("script");
    script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;
    script.async = true;
    script.defer = true;
    script.onload = () => {
      document.dispatchEvent(new Event("recaptchaLoaded"));
      console.log("reCAPTCHA loaded");
    };
    document.head.appendChild(script);
  }

  // Function to initialize the form submission logic
  function initializeForm() {
    const form = document.getElementById("contact-form");
    if (!form) {
      console.error("Contact form not found");
      return;
    }

    // Handle form submission
    form.addEventListener("submit", async function (event) {
      event.preventDefault(); // Prevent the default form submission

      // Verify if reCAPTCHA has been loaded
      if (typeof grecaptcha === "undefined") {
        console.error("reCAPTCHA has not loaded yet.");
        return;
      }

      // Execute reCAPTCHA and get the token
      grecaptcha.ready(async function () {
        try {
          const token = await grecaptcha.execute(siteKey, { action: "submit" });
          // Append the token to a hidden field in the form
          const recaptchaResponseInput = document.getElementById(
            "g-recaptcha-response"
          );
          if (recaptchaResponseInput) {
            recaptchaResponseInput.value = token;
          } else {
            // Create a hidden input for the reCAPTCHA response token if it doesn't exist
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = "g-recaptcha-response";
            hiddenInput.id = "g-recaptcha-response";
            hiddenInput.value = token;
            form.appendChild(hiddenInput);
          }

          // disable and change text of submit button
          disableSubmitButton();

          // Use the Fetch API to submit the form data
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: "POST",
            body: formData,
          });

          // Handle the server response
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          // redirect to thank you page
          const domain = window.location.origin;
          window.location.href = domain + prefix + "thanks";
        } catch (error) {
          alert("There was an error submitting the form. Please try again.");
          enableSubmitButton();
          throw new Error(error);
          // Handle errors, display error message, etc.
        }
      });
    });
  }

  // Listen for the reCAPTCHA script to load and then initialize the form
  document.addEventListener("recaptchaLoaded", initializeForm);

  // Observe the form and load the reCAPTCHA script when it becomes visible
  document.addEventListener("DOMContentLoaded", () => {
    const contactForm = document.getElementById("contact-form");
    if (contactForm) {
      // If the form is already visible, load the reCAPTCHA script immediately
      if (contactForm.getBoundingClientRect().top < window.innerHeight) {
        loadRecaptchaScript();
      } else {
        // Otherwise, use IntersectionObserver to determine when it becomes visible
        const observer = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                loadRecaptchaScript();
                observer.unobserve(entry.target);
              }
            });
          },
          { threshold: 0.5 }
        );
        observer.observe(contactForm);
      }
    } else {
      console.error("Contact form not found");
    }
  });
</script>
