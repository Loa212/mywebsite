---
import { getEntry, type CollectionEntry } from "astro:content";

export interface Props {
  i18nId: CollectionEntry<"i18n">["id"];
}

const props = Astro.props;
const { i18nId } = props;

const i18n = await getEntry("i18n", i18nId);
const { contact } = i18n.data;
---

<section id="contact-us" class="body-font relative">
  <div class="container relative px-5 pb-12 lg:pb-24 mx-auto">
    <div class="flex flex-col text-center w-full mb-6">
      <h1 class="title">{contact.title}</h1>
      <p
        class="lg:w-2/3 mx-auto leading-relaxed text-base text-gray-500 max-w-xl mt-4"
      >
        {contact.subtitle}
      </p>
    </div>
    <div class="lg:w-1/2 md:w-2/3 mx-auto">
      <form id="contact-form">
        <div class="flex flex-wrap -m-2">
          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="name" class="leading-7 text-sm text-gray-600">
                {contact.name}
              </label>
              <input
                required
                type="text"
                id="name"
                name="name"
                placeholder={contact.name}
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>
          <div class="p-2 w-full md:w-1/2">
            <div class="relative">
              <label for="email" class="leading-7 text-sm text-gray-600"
                >{contact.email}</label
              >
              <input
                required
                type="email"
                id="email"
                name="email"
                placeholder="example@email.com"
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              />
            </div>
          </div>
          <div class="p-2 w-full">
            <div class="relative">
              <label for="message" class="leading-7 text-sm text-gray-600"
                >{contact.message}</label
              >
              <textarea
                minlength="4"
                required
                id="message"
                name="message"
                class="w-full bg-gray-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
              ></textarea>
            </div>
          </div>
        </div>
        <div class="p-2 w-full">
          <button
            type="submit"
            class="disabled:opacity-30 flex mx-auto text-white bg-blue-500 border-0 py-2 px-8 focus:outline-none hover:bg-blue-600 rounded text-lg"
          >
            <!-- Text will be updated by the script -->
            {contact.cta}
          </button>
          <div id="recaptcha-banner" class="text-center text-xs mt-2">
            This site is protected by reCAPTCHA and the Google
            <a
              class="link link-primary"
              href="https://policies.google.com/privacy">Privacy Policy</a
            > and

            <a
              class="link link-primary"
              href="https://policies.google.com/terms">Terms of Service</a
            >
             apply.
          </div>
        </div>
      </form>

      <!-- Response Message -->
      <div id="response-message" style="display:none;" class="alert">
        <div class="flex-1">
          <label id="response-label"></label>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .title {
    color: #252525;
    font-size: 48px;
    font-style: normal;
    font-weight: 700;
    line-height: 64px; /* 133.333% */
    text-transform: capitalize;
  }
</style>

<script type="text/javascript">
  window.addEventListener("DOMContentLoaded", (event) => {
    const form = document.getElementById("contact-form");
    const responseMessageDiv = document.getElementById("response-message");
    const responseLabel = document.getElementById("response-label");
    const submitButton = form.querySelector('button[type="submit"]');

    if (!(form instanceof HTMLFormElement)) throw new Error("Form not found");
    if (!(responseMessageDiv instanceof HTMLElement))
      throw new Error("Response message div not found");
    if (!(responseLabel instanceof HTMLElement))
      throw new Error("Response label not found");
    if (!(submitButton instanceof HTMLButtonElement))
      throw new Error("Submit button not found");

    form.addEventListener("submit", async function (event) {
      event.preventDefault();
      const formData = new FormData(form);
      formData.append("i18n", "en"); // Example value for i18n

      // Here we integrate reCAPTCHA
      grecaptcha.ready(async () => {
        try {
          submitButton.disabled = true;
          submitButton.textContent = "Sending...";

          const token = await grecaptcha.execute(
            "6LeygvUoAAAAADbGzaWtK8Eu7jVfVXxNJOkwLYA_",
            {
              action: "submit",
            }
          );
          formData.append("g-recaptcha-response", token);

          const response = await fetch("/api/mailer", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          responseMessageDiv.style.display = "block";
          responseMessageDiv.classList.add("alert-success");
          responseMessageDiv.classList.remove("alert-error");
          responseLabel.textContent = data.message;
        } catch (error) {
          responseMessageDiv.style.display = "block";
          responseMessageDiv.classList.add("alert-error");
          responseMessageDiv.classList.remove("alert-success");
          responseLabel.textContent =
            error instanceof Error ? error.message : "An error occurred";
        } finally {
          submitButton.disabled = false;
          submitButton.style.display = "none";
          // hide the recaptcha banner
          document.getElementById("recaptcha-banner").style.display = "none";
        }
      });
    });
  });
</script>

<script
  src="https://www.google.com/recaptcha/api.js?render=6LeygvUoAAAAADbGzaWtK8Eu7jVfVXxNJOkwLYA_"
  async></script>
